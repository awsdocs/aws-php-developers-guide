.. Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0
   International License (the "License"). You may not use this file except in compliance with the
   License. A copy of the License is located at http://creativecommons.org/licenses/by-nc-sa/4.0/.

   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
   either express or implied. See the License for the specific language governing permissions and
   limitations under the License.

####################
Assuming |IAM| Roles
####################


.. meta::
   :description: How to load credentials for AWS using the AWS SDK for PHP.
   :keywords: configuration, specify region, region, credentials, proxy
   
   
.. _instance_profile_credentials:

Using |IAM| Roles for |EC2| Instance Variable Credentials
==========================================================

If you're running your application on an |EC2| instance, the preferred way to provide credentials to
make calls to AWS is to use an :ec2-ug:`IAM role <iam-roles-for-amazon-ec2>`
to get temporary security credentials.

When you use |IAM| roles, you don't need to worry about
credential management from your application. They allow an instance to "assume" a role by retrieving temporary
credentials from the |EC2| instance's metadata server.

The temporary credentials, often referred to as **instance profile credentials**, allow
access to the actions and resources that the role's policy allows. |EC2| handles all the legwork of securely
authenticating instances to the |IAM| service to assume the role, and periodically
refreshing the retrieved role credentials. This keeps your application secure with
almost no work on your part.

.. note::

    Instance profile credentials and other temporary credentials generated by
    the |STSlong| (|STS|) are not supported by every
    service. To determine whether the service you're using supports temporary
    credentials, see :iam-ug:`AWS Services that Support AWS STS <reference_aws-services-that-work-with-iam>`.

    To avoid hitting the metadata service every time, you can pass an instance of ``Aws\CacheInterface``
    in as the ``'credentials'`` option to a client constructor. This lets the SDK
    use cached instance profile credentials instead. For details, see :doc:`guide_configuration`.
    
   
Create and assign |IAM| role to an |EC2| Instance
-------------------------------------------------

1. Create an |IAM| client.

    **Imports**

    .. code-block:: php

       require 'vendor/autoload.php';

       use Aws\Iam\IamClient;


    **Sample Code**

    .. code-block:: php

       $client = new IamClient([
           'region' => 'us-west-2',
           'version' => '2010-05-08'
       ]);

2. Create an |IAM| role with the permissions for the actions and resources you'll use.

    **Sample Code**

     .. code-block:: php

       $result = $client->createRole([
           'AssumeRolePolicyDocument' => 'IAM JSON Policy', // REQUIRED
           'Description' => 'Description of Role',
           'RoleName' => 'RoleName', // REQUIRED
       ]);




3. Create an |IAM| instance profile and store the Amazon Resource Name (ARN) from the result.

    .. note::

        If you use the |IAM| console instead of the |sdk-php|, the console creates an instance profile automatically and gives it the same name as the role to which it corresponds.

     **Sample Code**

     .. code-block:: php

       $IPN = 'InstanceProfileName';

       $result = $client->createInstanceProfile([
           'InstanceProfileName' => $IPN ,
       ]);

       $ARN = $result['Arn'];
       $InstanceID =  $result['InstanceProfileId'];



4. Create an |EC2| client.

    **Imports**

    .. code-block:: php

       require 'vendor/autoload.php';

       use Aws\Ec2\Ec2Client;


    **Sample Code**

    .. code-block:: php

       $ec2Client = new Ec2Client([
           'region' => 'us-west-2',
           'version' => '2016-11-15',
       ]);


5. Add the instance profile to a running or stopped |EC2| instance. Use the instance profile name of your |IAM| role.

     **Sample Code**

    .. code-block:: php

       $result = $ec2Client->associateIamInstanceProfile([
          'IamInstanceProfile' => [
              'Arn' => $ARN
              'Name' => $IPN,
          ],
          'InstanceId' => $InstanceID
      ]);



For more information, see :EC2-ug:`IAM Roles for Amazon EC2<iam-roles-for-amazon-ec2>`.

.. _ecs_credentials:
 
Using |IAM| Roles for |ECS| Tasks
=================================

By using |IAM| roles for |ECSlong| (|ECS|) tasks, you can specify an |IAM| role that
the containers in a task can use. This is a strategy for managing credentials
for your applications to use, similar to the way that |EC2| instance profiles
provide credentials to |EC2| instances.

Instead of creating and distributing your AWS credentials to the containers or
using the |EC2| instanceâ€™s role, you can associate an |IAM| role with an ECS task definition or
``RunTask`` :aws-php-class:`API </api-ecs-2014-11-13.html#runtask>` operation.

.. note::

    Instance profile credentials and other temporary credentials generated by
    |STS| are not supported by every
    service. To determine whether the service you're using supports temporary
    credentials, see :iam-ug:`AWS Services that Support AWS STS <reference_aws-services-that-work-with-iam>`.

For more information, see :EC2-ug:`IAM Roles for Amazon EC2 Container Service Tasks<task-iam-roles>`.


Using an |IAM| Role from another AWS account
============================================

To assume a role from another AWS account, first you must create an IAM role in that account that allows entities in other AWS accounts to perform actions in that account. 
For more information about cross account access see 
:iam-ug:`Tutorial: Delegate Access Across AWS Accounts Using IAM Roles <tutorial_cross-account-with-roles>`

Once created record the role-arn to be used when authenticating. You will need permission to 
assume this role using the AWS account associated with your provided credentials.

Create an |STS| client with credentials for your AWS account. Below we used a Credentials 
profile, but you can use any method. With the newly created STS client, call assume-role and 
provide a sessionName. Create new credentials from the result. These credentials will last an 
hour by default, but can be configured to last between 15 minutes and the maximum session 
duration using the DurationSeconds parameter.

**Sample Code**

    .. code-block:: php
    
        $stsClient = new Aws\Sts\StsClient([
            'profile' => 'default',
            'region' => 'us-east-2',
            'version' => '2011-06-15'
        ]);
        
        $ARN = "arn:aws:iam::123456789012:role/xaccounts3access"
        $sessionName = "s3-access-example"
        
        $result = $stsClient->AssumeRole([
              'RoleArn' => $ARN,
              'RoleSessionName' => $sessionName,
        ]);
        
         $s3Client = new S3Client([
            'version'     => '2006-03-01',
            'region'      => 'us-west-2',
            'credentials' =>  [
                'key'    => $result['Credentials']['AccessKeyId'],
                'secret' => $result['Credentials']['SecretAccessKey'],
                'token'  => $result['Credentials']['SessionToken']
            ]
        ]);

For more information see :iam-ug:`Using IAM Roles <id_roles_use>` or 
:aws-php-class:`AssumeRole <api-sts-2011-06-15.html#assumerole>` in the |sdk-php| API Reference.


Assuming a Role with Cognito
============================

|COG| provides authentication, authorization, and user management for applications when users do not have an AWS account. Create a directory of users with a User Pool. Users can sign in directly or with a third party identity provider by using an Identity Pool. 

For more information about User Pools see :iam-ug:`Getting Started with User Pools <getting-started-with-cognito-user-pools>` or 
:aws-php-class:`Amazon Cognito Identity Provider <api-cognito-idp-2016-04-18>` in the |sdk-php| API Reference.
 
For more information about Identity Pools see :iam-ug:`Getting Started with Amazon Cognito Identity Pools (Federated Identities) <getting-started-with-identity-pools>` or 
:aws-php-class:`Amazon Cognito Identity <api-cognito-identity-2014-06-30>` in the |sdk-php| API Reference.   

1. Create a User Pool
1. Create an Admin User (or other users)
1. Create an Identity Pool 
1. Create a User Pool Client 
1. Add Identity Pool Login Provider
1. Create IAM Role for User Pool to Assume
1. Generate a Cognito ID
1. ... 
1. Associate Identity with User Pool
1. Authenticate Identity with Third Party - GetCredentialsForIdentity 
